#!/usr/bin/env python3
import os
import sys
import subprocess
import struct
import tempfile

def extract_frames(input_video, output_folder, fps=1, width=320):
    """Extracts frames from a video at a set interval using ffmpeg."""
    os.makedirs(output_folder, exist_ok=True)
    ffmpeg_cmd = [
        "ffmpeg", "-i", input_video,
            "-sn",
            "-an",
            "-copyts",
            "-vsync", "0",
            "-vf", f"select='eq(pict_type,I)',fps={fps},scale=w=320:-1",
            os.path.join(output_folder, "%04d.jpg")
    ]
    subprocess.run(ffmpeg_cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)

def create_bif(image_folder, output_bif, interval=1000):
    """Creates a .bif file from extracted images."""
    images = sorted([f for f in os.listdir(image_folder) if f.endswith(".jpg")])

    with open(output_bif, "wb") as bif:
        bif.write(b"BIF\x00\x00\x00\x00\x00")
        bif.write(struct.pack("<I", 0x0100))
        bif.write(struct.pack("<I", len(images)))
        bif.write(struct.pack("<I", interval))
        bif.write(b"\x00" * 44)

        bif.write(struct.pack("<Q", 8))

        for i, img_file in enumerate(images):
            with open(os.path.join(image_folder, img_file), "rb") as img:
                bytes = img.read();
                timestamp = i * interval
                bif.write(struct.pack("<I", timestamp))
                bif.write(struct.pack("<I", len(bytes)))
                bif.write(bytes)

        bif.write(struct.pack("<I", 0xFFFFFFFF))


def main():
    if len(sys.argv) != 3:
        print("Usage: python generate_bif.py <input_video> <output_bif>")
        sys.exit(1)

    input_video = sys.argv[1]
    output_bif = sys.argv[2]

    with tempfile.TemporaryDirectory() as temp_dir:
        extract_frames(input_video, temp_dir)
        create_bif(temp_dir, output_bif)

if __name__ == "__main__":
    main()
